---
- name: Label storage nodes
  hosts: ceph_storage_nodes
  tags: label_nodes
  tasks:
    - name: Label storage nodes
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Node
          metadata:
            name: "{{ inventory_hostname }}"
            labels:
              role: storage-node
      delegate_to: localhost

- name: Label control plane nodes
  hosts: openstack_control_plane
  tags: label_nodes
  tasks:
    - name: Label control plane nodes
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Node
          metadata:
            name: "{{ inventory_hostname }}"
            labels:
              openstack-control-plane: enabled
      delegate_to: localhost

# Commenting this out since the doc limits to the first three controller nodes
# and this will enable vault storage on all of the controller nodes
# - name: Label vault nodes
#   hosts: openstack_control_plane
#   tasks:
#     - name: Label vault nodes
#       kubernetes.core.k8s:
#         definition:
#           apiVersion: v1
#           kind: Node
#           metadata:
#             name: "{{ inventory_hostname }}"
#             labels:
#               vault-storage: enabled
#       delegate_to: localhost

- name: Label nova compute nodes
  hosts: nova_compute_nodes
  tags: label_nodes
  tasks:
    - name: Label nova compute nodes
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Node
          metadata:
            name: "{{ inventory_hostname }}"
            labels:
              openstack-compute-node: enabled
      delegate_to: localhost

- name: Label openstack network nodes
  hosts: ovn_network_nodes:nova_compute_nodes
  tags: label_nodes
  tasks:
    - name: Label nova compute nodes
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Node
          metadata:
            name: "{{ inventory_hostname }}"
            labels:
              openstack-network-node: enabled
      delegate_to: localhost

- name: Label worker nodes
  hosts: openstack_control_plane:openstack_worker_nodes
  tags: label_nodes
  tasks:
    - name: Label worker nodes
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Node
          metadata:
            name: "{{ inventory_hostname }}"
            labels:
              node-role.kubernetes.io/worker: worker
      delegate_to: localhost

- name: Remove taint from controllers
  hosts: kube_control_plane
  tags: taint_nodes
  tasks:
    - name: Remove taint
      kubernetes.core.k8s_taint:
        state: absent
        name: "{{ inventory_hostname }}"
        taints:
          - effect: NoSchedule
      delegate_to: localhost

- name: Deploy k8s dashboard
  hosts: localhost
  connection: local
  tags: deploy_dashboard
  tasks:
    - name: Deploy k8s dashboard
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', dir='/opt/genestack/base-kustomize/k8s-dashboard') }}"
        apply: true

- name: Deploy prometheus
  hosts: localhost
  connection: local
  tags: deploy_prometheus
  tasks:
    # Not happy about this but deploying prometheus fails on the first run.
    # TODO: Find a way to do this cleanly using the kubernetes.core.k8s module
    - name: Deploy prometheus # noqa: no-changed-when risky-shell-pipe
      ansible.builtin.shell:
        cmd: kubectl kustomize --enable-helm /opt/genestack/base-kustomize/prometheus | kubectl apply --server-side -f -
      retries: 2
      delay: 2
      register: deploy_prometheus_result
      until: deploy_prometheus_result is not failed

- name: Make helm charts
  hosts: localhost
  connection: local
  tags: make_helm_charts
  tasks:
    - name: Make helm charts
      community.general.make:
        chdir: "{{ item }}"
        target: all
      loop:
        - /opt/genestack/submodules/openstack-helm
        - /opt/genestack/submodules/openstack-helm-infra

## Ceph internal section
## https://docs.rackspacecloud.com/storage-ceph-rook-internal/
- name: Ceph internal
  hosts: localhost
  connection: local
  tags: ceph_internal
  tasks:
    - name: Hack to set image for the operator
      ansible.builtin.lineinfile:
        dest: "/opt/genestack/base-kustomize/rook-operator/operator.yaml"
        search_string: 'image: rook/ceph:master'
        line: "          image: rook/ceph:v1.13.7"
        state: present

    # https://docs.rackspacecloud.com/storage-ceph-rook-internal/#deploy-the-rook-operator
    # kubectl apply -k /opt/genestack/base-kustomize/rook-operator/
    - name: Deploy rook operator
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/rook-operator') }}"
        apply: true
        state: present
      register: result

    - name: Wait for rook operator deployment conditions
      kubernetes.core.k8s_info:
        name: rook-ceph-operator
        kind: Deployment
        namespace: rook-ceph
        wait: true
        wait_condition:
          type: "{{ item.type }}"
          reason: "{{ item.reason }}"
          status: "True"
      loop:
        - { type: 'Available', reason: 'MinimumReplicasAvailable'}
        - { type: 'Progressing', reason: 'NewReplicaSetAvailable'}

    - name: Wait for rook operator pod conditions
      kubernetes.core.k8s_info:
        api_version: v1
        # name: rook-ceph-operator
        kind: Pod
        label_selectors:
          - app = rook-ceph-operator
        namespace: rook-ceph
        wait: true
        wait_condition:
          type: "{{ item }}"
          status: "True"
      loop:
        - "Ready"
        - "ContainersReady"

    # https://docs.rackspacecloud.com/storage-ceph-rook-internal/#deploy-the-rook-cluster
    # kubectl apply -k /opt/genestack/base-kustomize/rook-cluster
    - name: Deploy rook cluster
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/rook-cluster') }}" # yamllint disable-line rule:line-length
        apply: true
        state: present

    - name: Wait for rook cluster deployment conditions
      kubernetes.core.k8s_info:
        api_version: "ceph.rook.io/v1"
        name: rook-ceph
        kind: CephCluster
        namespace: rook-ceph
        wait: true
        wait_condition:
          type: "{{ item.type }}"
          reason: "{{ item.reason }}"
          status: "True"
        wait_timeout: 900
      loop:
        - { type: 'Ready', reason: 'ClusterCreated'}

    # https://docs.rackspacecloud.com/storage-ceph-rook-internal/#create-storage-classes
    # kubectl apply -k /opt/genestack/base-kustomize/rook-defaults
    - name: Create storage classes
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/rook-defaults') }}" # yamllint disable-line rule:line-length
        apply: true
        state: present

### Infrastructre section
### https://docs.rackspacecloud.com/infrastructure-overview/

- name: OpenStack namespace
  hosts: localhost
  connection: local
  tags: openstack_namespace
  tasks:
    - name: Create OpenStack namespace
      kubernetes.core.k8s:
        name: openstack
        api_version: v1
        kind: Namespace
        state: present

### https://docs.rackspacecloud.com/infrastructure-gateway-api/

- name: GatewayAPI
  hosts: localhost
  connection: local
  tags: gatewayapi
  tasks:
    - name: Create nginx-gateway namespace
      kubernetes.core.k8s:
        name: nginx-gateway
        api_version: v1
        kind: Namespace
        state: present

    - name: Install Gateway API resources
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='https://github.com/nginxinc/nginx-gateway-fabric/config/crd/gateway-api/standard?ref=v1.3.0', enable_helm=False) }}" # yamllint disable-line rule:line-length

    - name: Install the NGINX Gateway Fabric controller
      kubernetes.core.helm:
        name: nginx-gateway-fabric
        namespace: nginx-gateway
        chart_ref: /opt/genestack/submodules/nginx-gateway-fabric/charts/nginx-gateway-fabric
        values_files:
          - /opt/genestack/base-helm-configs/nginx-gateway-fabric/helm-overrides.yaml

### https://docs.rackspacecloud.com/infrastructure-letsencrypt/
- name: LetsEncrypt
  hosts: localhost
  connection: local
  tags: letsencrypt
  vars_prompt:
    - name: letsencrypt_email
      prompt: Email for letsencrypt?
      private: false
  tasks:
    - name: Apply LetsEncrypt cluster issuer manifest
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: "{{ letsencrypt_email }}"
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
              - http01:
                  gatewayHTTPRoute:
                    parentRefs:
                    - group: gateway.networking.k8s.io
                      kind: Gateway
                      name: flex-gateway
                      namespace: nginx-gateway

### https://docs.rackspacecloud.com/infrastructure-mariadb/
- name: MariaDB
  hosts: localhost
  connection: local
  tags: mariadb
  vars:
    secret_name: mariadb
    cluster_name: cluster.local
  tasks:
    - name: Get secret if exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ secret_name }}"
        namespace: openstack
      register: maraiadb_secret_output

    - name: Create secret if it does not exist
      kubernetes.core.k8s:
        state: present
        namespace: openstack
        definition:
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: "{{ secret_name }}"
            namespace: openstack
          stringData:
            root-password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=32) }}"
            password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=32) }}"
      when: maraiadb_secret_output.resources | length == 0

    - name: Set cluster name in kustomize file
      ansible.builtin.lineinfile:
        path: /opt/genestack/base-kustomize/mariadb-operator/kustomization.yaml
        regexp: "^      clusterName: cluster.local"
        line: "      clusterName: {{ cluster_name }}"

    - name: Deploy mariadb operator
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/mariadb-operator', enable_helm=True) }}" # yamllint disable-line rule:line-length
        namespace: mariadb-system
        apply: true
        server_side_apply:
          field_manager: ansible
          force_conflicts: true
        state: present

    - name: Wait for mariadb operator webhook pod conditions
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        label_selectors:
          - app.kubernetes.io/name = mariadb-operator-webhook
        namespace: mariadb-system
        wait: true
        wait_condition:
          type: "{{ item }}"
          status: "True"
      loop:
        - "Ready"
        - "ContainersReady"

    - name: Deploy the mariadb cluster
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/mariadb-cluster/base') }}" # yamllint disable-line rule:line-length
        namespace: openstack
        apply: true
        state: present

### https://docs.rackspacecloud.com/infrastructure-rabbitmq/#deploy-the-rabbitmq-operator
- name: RabbitMQ
  hosts: localhost
  connection: local
  tags: rabbitmq
  tasks:
    - name: Deploy RabbitMQ operator
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/rabbitmq-operator') }}" # yamllint disable-line rule:line-length
        apply: true
        state: present

    - name: Wait for RabbitMQ operator pod conditions
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        label_selectors:
          - app.kubernetes.io/component = rabbitmq-operator
          - app.kubernetes.io/name = rabbitmq-cluster-operator
        namespace: rabbitmq-system
        wait: true
        wait_condition:
          type: "{{ item }}"
          status: "True"
      loop:
        - "Ready"
        - "ContainersReady"

    - name: Deploy RabbitMQ topology operator
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/rabbitmq-topology-operator') }}" # yamllint disable-line rule:line-length
        apply: true
        state: present

    - name: Wait for RabbitMQ topology operator pod conditions
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        label_selectors:
          - app.kubernetes.io/component = rabbitmq-operator
          - app.kubernetes.io/name = messaging-topology-operator
        namespace: rabbitmq-system
        wait: true
        wait_condition:
          type: "{{ item }}"
          status: "True"
      loop:
        - "Ready"
        - "ContainersReady"

    - name: Deploy RabbitMQ cluster
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/rabbitmq-cluster/base') }}" # yamllint disable-line rule:line-length
        apply: true
        state: present

    - name: Wait for rabbitmq cluster deployment conditions
      kubernetes.core.k8s_info:
        api_version: "rabbitmq.com/v1beta1"
        name: rabbitmq
        kind: RabbitmqCluster
        namespace: openstack
        wait: true
        wait_condition:
          type: "{{ item.type }}"
          reason: "{{ item.reason }}"
          status: "True"
        wait_timeout: 900
      loop:
        - { type: 'AllReplicasReady', reason: 'AllPodsAreReady'}
        - { type: 'ClusterAvailable', reason: 'AtLeastOneEndpointAvailable'}
        - { type: 'ReconcileSuccess', reason: 'Success'}

### https://docs.rackspacecloud.com/infrastructure-memcached/#deploy-the-memcached-cluster
- name: Memcached
  hosts: localhost
  connection: local
  tags: memcached
  tasks:
    - name: Deploy memcached
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/memcached/base-monitoring', enable_helm=True) }}" # yamllint disable-line rule:line-length
        apply: true
        server_side_apply:
          field_manager: ansible
          force_conflicts: true
        state: present

    - name: Wait for memcached deployment conditions
      kubernetes.core.k8s_info:
        api_version: "autoscaling/v2"
        name: memcached
        kind: HorizontalPodAutoscaler
        namespace: openstack
        wait: true
        wait_condition:
          type: "{{ item.type }}"
          reason: "{{ item.reason }}"
          status: "True"
        wait_timeout: 900
      loop:
        - { type: 'AbleToScale', reason: 'SucceededGetScale'}

### https://docs.rackspacecloud.com/infrastructure-libvirt/
- name: Libvirt
  hosts: localhost
  connection: local
  tags: libvirt
  tasks:
    - name: Deploy Libvirt
      kubernetes.core.k8s:
        namespace: openstack
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/libvirt', enable_helm=True) }}" # yamllint disable-line rule:line-length
        apply: true
        state: present

### https://docs.rackspacecloud.com/infrastructure-ovn-setup/
- name: Annotate network enabled nodes
  hosts: ovn_network_nodes:nova_compute_nodes
  tags: ovn
  tasks:
    - name: Annotate network enabled nodes
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Node
          metadata:
            name: "{{ inventory_hostname }}"
            annotations:
              ovn.openstack.org/int_bridge: br-int
              ovn.openstack.org/bridges: br-ex
              ovn.openstack.org/ports: br-ex:bond1
              ovn.openstack.org/mappings: physnet1:br-ex
              ovn.openstack.org/availability_zones: nova
              ovn.openstack.org/gateway: enabled
      delegate_to: localhost

### https://docs.rackspacecloud.com/infrastructure-ovn-setup/#run-the-ovn-integration
- name: Apply OVN integration
  hosts: localhost
  tags: ovn
  tasks:
    - name: Apply OVN integration
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/opt/genestack/base-kustomize/ovn') }}" # yamllint disable-line rule:line-length
        apply: true
        state: present

    - name: Patch kube-ovn-deployment nodeSelector
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            namespace: kube-system
            name: kube-ovn-controller
          spec:
            template:
              spec:
                nodeSelector:
                  kube-ovn/role: master
                  kubernetes.io/os: linux

- name: MetalLB config
  hosts: localhost
  tags: metallb
  tasks:
    - name: Get MetalLB vips from metadata
      ansible.builtin.uri:
        url: http://169.254.169.254/openstack/latest/meta_data.json
      register: metadata

    - name: Set MetalLB fact from openstack metadata
      ansible.builtin.set_fact:
        metallb_floating_ips: "{{ metadata.json.meta.metallb_flips | to_json }}"

    - name: Add floating ip addresses to IPAddressPool
      kubernetes.core.k8s:
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: openstack-external
            namespace: metallb-system
          spec:
            addresses: "{{ metadata.json.meta.metallb_flips }}"
            # addresses: "{{ metallb_floating_ips }}"
            autoAssign: false

    - name: Apply L2Advertisements for MetalLB
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'metallb-advertisements.yml.j2') }}"
